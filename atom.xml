<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Planet</title>
    <subtitle>The &#x27;Planet&#x27; theme for Zola</subtitle>
    <link rel="self" type="application/atom+xml" href="/atom.xml"/>
    <link rel="alternate" type="text/html" href="/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-10-09T00:00:00+00:00</updated>
    <id>/atom.xml</id>
    <entry xml:lang="en">
        <title>Implementing an alternative JIT provider for PostgreSQL</title>
        <published>2023-10-09T00:00:00+00:00</published>
        <updated>2023-10-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="/archive/implementing-jit-provider-for-pgsql/"/>
        <id>/archive/implementing-jit-provider-for-pgsql/</id>
        
        <content type="html" xml:base="/archive/implementing-jit-provider-for-pgsql/">&lt;p&gt;Just in time compilation is added to PostgreSQL since the version of 11. The default JIT provider for PostgreSQL is based on LLVM. PostgreSQL allows user to use an alternative JIT provider by setting the &lt;code&gt;jit_provider&lt;&#x2F;code&gt; GUC parameter&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. The pluggable JIT interface is very easy to use and I&#x27;ve successfully built two prototypes, one emits C codes&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and the other one emits assembly codes&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; using the AsmJit library&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. In this post, I&#x27;ll give a brief introduction to the existing LLVM JIT provider and show you how to implement the prototype that emits C codes. It&#x27;s fun and easy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction-to-the-llvm-jit-provider&quot;&gt;Introduction to the LLVM JIT provider&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;enable-the-llvm-jit&quot;&gt;Enable the LLVM JIT&lt;&#x2F;h3&gt;
&lt;p&gt;The builtin JIT provider can be enabled by appending &lt;code&gt;--with-llvm&lt;&#x2F;code&gt; to configuration flags when building PostgreSQL. If you have multiple LLVM toolchains installed on your system, you may need to specify the &lt;code&gt;CLANG&lt;&#x2F;code&gt; and &lt;code&gt;LLVM_CONFIG&lt;&#x2F;code&gt; environment variable to make sure they are from the same LLVM toolchain set. Otherwise, there will be ABI incompatible issues.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clang &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CXX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clang++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CLANG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;clang &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;LLVM_CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;llvm-config \
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;.&#x2F;configure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --with-llvm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;other-configure-flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After building it, type the following commands to verify that the LLVM JIT is enabled in your server.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# SHOW jit;
&lt;&#x2F;span&gt;&lt;span&gt; jit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;-----
&lt;&#x2F;span&gt;&lt;span&gt; on
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# SHOW jit_provider;
&lt;&#x2F;span&gt;&lt;span&gt; jit_provider
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;--------------
&lt;&#x2F;span&gt;&lt;span&gt; llvmjit
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Setting &lt;code&gt;jit_above_cost&lt;&#x2F;code&gt; to &lt;code&gt;0&lt;&#x2F;code&gt; to force the server to jit the query.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# SET jit_above_cost=0;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;SET
&lt;&#x2F;span&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN (ANALYZE) SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;                                                 QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;) (actual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;945&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;946&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; loops&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; Planning &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;039&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt; JIT:
&lt;&#x2F;span&gt;&lt;span&gt;   Functions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;   Options: Inlining false, Optimization false, Expressions true, Deforming true
&lt;&#x2F;span&gt;&lt;span&gt;   Timing: Generation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;181&lt;&#x2F;span&gt;&lt;span&gt; ms, Inlining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms, Optimization &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;216&lt;&#x2F;span&gt;&lt;span&gt; ms, Emission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;721&lt;&#x2F;span&gt;&lt;span&gt; ms, Total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;117&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt; Execution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;218&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt; rows)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From the JIT statistics, we learned that the LLVM JIT supports accelerating queries from various aspects, e.g., inlining functions, jitting expressions and jitting the tuple deforming process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jitting-expressions&quot;&gt;Jitting expressions&lt;&#x2F;h3&gt;
&lt;p&gt;In PostgreSQL, expressions in SQL queries are finally converted to low level operators and their results can be computed via interpreting these operators. Those operators are defined in the header file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;526fe0d79914b2dfcfd79effd1ab26ff62469248&#x2F;src&#x2F;include&#x2F;executor&#x2F;execExpr.h#L65&quot;&gt;&lt;code&gt;src&#x2F;include&#x2F;executor&#x2F;execExpr.h&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef enum&lt;&#x2F;span&gt;&lt;span&gt; ExprEvalOp
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* entire expression has been evaluated completely, return *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  EEOP_DONE,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* apply slot_getsomeattrs on corresponding tuple slot *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  EEOP_INNER_FETCHSOME,
&lt;&#x2F;span&gt;&lt;span&gt;  EEOP_OUTER_FETCHSOME,
&lt;&#x2F;span&gt;&lt;span&gt;  EEOP_SCAN_FETCHSOME,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the JIT is not enabled, the main entry for interpreting them is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;526fe0d79914b2dfcfd79effd1ab26ff62469248&#x2F;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c#L395&quot;&gt;&lt;code&gt;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c:ExecInterpExpr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and the result of the expression can be computed by iterating over the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;526fe0d79914b2dfcfd79effd1ab26ff62469248&#x2F;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c#L515&quot;&gt;&lt;code&gt;ExprState::steps&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; array.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt; * ExecInterpExpr is using &amp;quot;direct-threaded&amp;quot; implementation of expression evaluation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt; * to improve the performance. In order to make the interpreter easy to understand,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt; * I re-write it using a for-loop.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; Datum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ExecInterpExpr&lt;&#x2F;span&gt;&lt;span&gt;(ExprState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;, ExprContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;econtext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;isnull&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; opno &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; opno &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;steps_len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;opno)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		ExprEvalStep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;state-&amp;gt;steps[opno];
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;((ExprEvalOp) op-&amp;gt;opcode)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; EEOP_DONE:
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;isnull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;resnull;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;resvalue;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; EEOP_INNER_FETCHSOME:
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CheckOpSlotCompatibility&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(op, innerslot)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;slot_getsomeattrs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(innerslot, op-&amp;gt;d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;last_var&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Other operators... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the LLVM JIT is enabled, before interpreting operators, the LLVM JIT provider will compile these operators into the LLVM IR and the main entry for compiling operators is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;526fe0d79914b2dfcfd79effd1ab26ff62469248&#x2F;src&#x2F;backend&#x2F;jit&#x2F;llvm&#x2F;llvmjit_expr.c#L78&quot;&gt;&lt;code&gt;src&#x2F;backend&#x2F;jit&#x2F;llvm&#x2F;llvmjit_expr.c:llvm_compile_expr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;llvm_compile_expr&lt;&#x2F;span&gt;&lt;span&gt;(ExprState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * Emit a function that has similar signature with
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * Datum ExecInterpExpr(ExprState *state, ExprContext *econtext, bool *isnull).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * NOTE: LLVM never has such API, it&amp;#39;s for easy understanding!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	Func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; LLVMIRBuilder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;newFunc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Datum JittedExecInterpExpr(ExprState *, ExprContext *, bool *)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; opno &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; opno &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;steps_len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;op)
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;((ExprEvalOp) op-&amp;gt;opcode)
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; EEOP_DONE:
&lt;&#x2F;span&gt;&lt;span&gt;		{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Emit LLVM IR for the EEOP_DONE operator *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;			Func.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Assign state-&amp;gt;resnull to *isnull&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			Func.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Return state-&amp;gt;resvalue&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Emit LLVM IR for other operators... *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * Add the emitted function to the LLVM JIT runtime.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * EmittedFunc is the address that the jitted function emitted to.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	EmittedFunc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; LLVMRuntime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Func)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * Store the emitted function&amp;#39;s address to state-&amp;gt;evalfunc so that the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 * caller will invoke the jitted function.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	state-&amp;gt;evalfunc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; EmittedFunc;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jitting-the-tuple-deforming-process&quot;&gt;Jitting the tuple deforming process&lt;&#x2F;h3&gt;
&lt;p&gt;The tuple deforming process is invoked in 3 operators: &lt;code&gt;EEOP_INNER_FETCHSOME&lt;&#x2F;code&gt;, &lt;code&gt;EEOP_OUTER_FETCHSOME&lt;&#x2F;code&gt; and &lt;code&gt;EEOP_SCAN_FETCHSOME&lt;&#x2F;code&gt;. That is to say, if we add the code generation support for these 3 operators then jitting the tuple deforming is supported.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inlining-functions&quot;&gt;Inlining functions&lt;&#x2F;h3&gt;
&lt;p&gt;If we install the PostgreSQL server with LLVM JIT support, there&#x27;s a special directory &lt;code&gt;&amp;lt;prefix&amp;gt;&#x2F;lib&#x2F;postgresql&#x2F;bitcode&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -al &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;lib&#x2F;postgresql&#x2F;bitcode&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 2068
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  3 v users    4096 Nov  6 23:24 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  4 v users    4096 Nov  5 09:03 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;drwxr-xr-x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 28 v users    4096 Oct 22 10:22 postgres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;-rw-r--r--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;  1 v users 2104036 Nov  1 21:25 postgres.index.bc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It contains the LLVM bitcodes of the whole server. When the jitted expression is invoking other functions, the server process will look up the function definition from bitcodes. If the function is able to be inlined, that function will be extracted from bitcodes and be placed in the jitted function body. Our prototype will not support inlining functions since I haven&#x27;t been able to find a way to implement it without LLVM.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implement-our-own-jit-provider-prototype&quot;&gt;Implement our own JIT provider prototype&lt;&#x2F;h2&gt;
&lt;p&gt;From the above analysis, even if we are not experts of the executor, we are still able to implement an alternative JIT provider for PostgreSQL. Since the emitted function is identical to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;526fe0d79914b2dfcfd79effd1ab26ff62469248&#x2F;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c#L395&quot;&gt;&lt;code&gt;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c:ExecInterpExpr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-pluggable-jit-interface&quot;&gt;The pluggable JIT interface&lt;&#x2F;h3&gt;
&lt;p&gt;PostgreSQL provides interfaces for implementing JIT providers.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cc&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-cc &quot;&gt;&lt;code class=&quot;language-cc&quot; data-lang=&quot;cc&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;JitProviderCallbacks
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; For compiling operators to machine codes.
&lt;&#x2F;span&gt;&lt;span&gt;  JitProviderCompileExprCB compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; For releasing resources after finishing executing the jitted codes.
&lt;&#x2F;span&gt;&lt;span&gt;  JitProviderReleaseContextCB release_context;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; For reset some states when there&amp;#39;re errors occurred either during
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; compiling operators or executing jitted codes.
&lt;&#x2F;span&gt;&lt;span&gt;  JitProviderResetAfterErrorCB reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extern void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_PG_jit_provider_init&lt;&#x2F;span&gt;&lt;span&gt;(JitProviderCallbacks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;cb&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we&#x27;ve got basic knowledges about PostgreSQL&#x27;s JIT provider. Let&#x27;s get started!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;basic-setup-for-pg-slowjit&quot;&gt;Basic setup for &lt;code&gt;pg_slowjit&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We will implement our JIT provider as an extension, since PostgreSQL&#x27;s extension building framework&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; is very handy to use. Let&#x27;s create a directory &lt;code&gt;pg_slowjit&lt;&#x2F;code&gt; with 3 files in it: &lt;code&gt;Makefile&lt;&#x2F;code&gt;, &lt;code&gt;slowjit.control&lt;&#x2F;code&gt; and &lt;code&gt;slowjit.c&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;Makefile  (Click me to view the content)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;makefile&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-makefile &quot;&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;MODULE_big &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;slowjit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;EXTENSION &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;slowjit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;OBJS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;slowjit.o
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Disable LLVM bitcodes generation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt; with_llvm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;no
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_CONFIG &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;pg_config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PGXS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;shell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;PG_CONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;--pgxs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;include $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;PGXS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.control  (Click me to view the content)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;comment = &amp;#39;A very inefficient jit provider.&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;default_version = &amp;#39;1.0.0&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;module_pathname = &amp;#39;$libdir&#x2F;slowjit&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;relocatable = true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the content)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;extern void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_PG_jit_provider_init&lt;&#x2F;span&gt;&lt;span&gt;(JitProviderCallbacks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;cb&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;slowjit_compile_expr&lt;&#x2F;span&gt;&lt;span&gt;(ExprState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;   * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;   * loaded successfully.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;   *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;elog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(NOTICE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;slowjit_compile_expr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Returning &amp;#39;false&amp;#39; indicates we won&amp;#39;t jit the current expression. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;slowjit_release_context&lt;&#x2F;span&gt;&lt;span&gt;(JitContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;elog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(NOTICE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;slowjit_release_context&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;slowjit_reset_after_error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;elog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(NOTICE, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;slowjit_reset_after_error&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;_PG_jit_provider_init&lt;&#x2F;span&gt;&lt;span&gt;(JitProviderCallbacks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;cb&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  cb-&amp;gt;compile_expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;  cb-&amp;gt;release_context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;  cb-&amp;gt;reset_after_error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Test that we are able to compile our extension.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; make PG_CONFIG=&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;pg_config install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure that PostgreSQL can load our JIT provider.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;&#x2F;&amp;lt;path&amp;gt;&#x2F;&amp;lt;to&amp;gt;&#x2F;&amp;lt;DataDir&amp;gt;&#x2F;postgresql.conf&lt;&#x2F;code&gt; and add following lines.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ jit_provider=&amp;#39;slowjit&amp;#39; # Tell PostgreSQL to use our JIT provider
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ jit_above_cost=0       # Force the PostgreSQL to jit expressions
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Restart the PostgreSQL server.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; pg_ctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -D &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;DataDir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;-l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;logfile restart
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;psql&lt;&#x2F;code&gt; client.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_compile_expr
&lt;&#x2F;span&gt;&lt;span&gt;                QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You&#x27;ll find that the NOTICE message is printed out to our terminal. Our JIT provider has been successfully loaded! 🎉&lt;&#x2F;p&gt;
&lt;h3 id=&quot;context-management-for-pg-slowjit&quot;&gt;Context management for &lt;code&gt;pg_slowjit&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You may have noticed that there&#x27;s a special data structure called &lt;code&gt;JitContext&lt;&#x2F;code&gt;, it tracks allocated resources and records essential information of the current JIT compilation. &lt;code&gt;JitContext::flags&lt;&#x2F;code&gt; controls whether to jit the tuple deforming process (&lt;code&gt;flags &amp;amp; PGJIT_DEFORM&lt;&#x2F;code&gt;), whether to optimize jitted codes aggressively (&lt;code&gt;flags &amp;amp; PGJIT_OPT3&lt;&#x2F;code&gt;), etc. &lt;code&gt;JitContext::resowner&lt;&#x2F;code&gt; records the current resource owner. &lt;code&gt;JitContext::instr&lt;&#x2F;code&gt; records some statistics about the current jitted query, e.g., time consumed in the tuple deforming process, code optimization, function inlining, etc.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; JitContext
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; flags;
&lt;&#x2F;span&gt;&lt;span&gt;  ResourceOwner resowner;
&lt;&#x2F;span&gt;&lt;span&gt;  JitInstrumentation instr;
&lt;&#x2F;span&gt;&lt;span&gt;} JitContext;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Different JIT providers can have different resources to track and we can inherit the &lt;code&gt;JitContext&lt;&#x2F;code&gt; for &lt;code&gt;SlowJitContext&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; SlowJitContext {
&lt;&#x2F;span&gt;&lt;span&gt;  JitContext base;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* Fields to be implemented later. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;} SlowJitContext;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The callback function &lt;code&gt;cb-&amp;gt;compile_expr&lt;&#x2F;code&gt; can be called multiple times for a single query. The &lt;code&gt;JitContext&lt;&#x2F;code&gt; data structure gets initialized when the &lt;code&gt;cb-&amp;gt;compile_expr&lt;&#x2F;code&gt; gets called for the first time. Now, let&#x27;s initialize our &lt;code&gt;SlowJitContext&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the diff)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; &#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; extern void _PG_jit_provider_init(JitProviderCallbacks *cb);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ typedef struct SlowJitContext {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+   JitContext base;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+   &#x2F;* Fields to be implemented later. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ } SlowJitContext;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static bool slowjit_compile_expr(ExprState *state) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  PlanState *parent = state-&amp;gt;parent;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  SlowJitContext *jit_ctx = NULL;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* parent shouldn&amp;#39;t be NULL. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  Assert(parent != NULL);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt; 	 * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span&gt; 	 * loaded successfully.
&lt;&#x2F;span&gt;&lt;span&gt; 	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_compile_expr&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* Initialize the context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  if (parent-&amp;gt;state-&amp;gt;es_jit) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+     * We can reuse the JIT context.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jit_ctx = (SlowJitContext *)parent-&amp;gt;state-&amp;gt;es_jit;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  } else {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    ResourceOwnerEnlargeJIT(CurrentResourceOwner);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jit_ctx = (SlowJitContext *)MemoryContextAllocZero(TopMemoryContext,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+                                                       sizeof(SlowJitContext));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jit_ctx-&amp;gt;base.flags = parent-&amp;gt;state-&amp;gt;es_jit_flags;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* ensure cleanup *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jit_ctx-&amp;gt;base.resowner = CurrentResourceOwner;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    ResourceOwnerRememberJIT(CurrentResourceOwner, PointerGetDatum(jit_ctx));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* For re-using the JIT context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    parent-&amp;gt;state-&amp;gt;es_jit = &amp;amp;jit_ctx-&amp;gt;base;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Returning &amp;#39;false&amp;#39; indicates we won&amp;#39;t jit the current expression. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   return false;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_release_context(JitContext *ctx) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_release_context&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_reset_after_error(void) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_reset_after_error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; void _PG_jit_provider_init(JitProviderCallbacks *cb) {
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;compile_expr = slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;release_context = slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;reset_after_error = slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Re-compile our JIT provider by&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; make PG_CONFIG=&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&#x2F;pg_config install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Re-run the query and you&#x27;ll find that &lt;code&gt;slowjit_release_context&lt;&#x2F;code&gt; gets called! That is to say, resources being tracked in &lt;code&gt;SlowJitContext&lt;&#x2F;code&gt; can be released in &lt;code&gt;slowjit_release_context&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_compile_expr
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_release_context
&lt;&#x2F;span&gt;&lt;span&gt;                QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;code-generation&quot;&gt;Code generation&lt;&#x2F;h3&gt;
&lt;p&gt;As we have mentioned above, &lt;code&gt;pg_slowjit&lt;&#x2F;code&gt; emits C codes and compile C codes to shared libraries to jit expressions. I learned it from Andy Pavlo&#x27;s database lecture&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. It&#x27;s easy to implement and quite interesting. I didn&#x27;t even realize that a C compiler could be a JIT compiler before watching the lecture. In this section, we will emit a function with name &lt;code&gt;slowjit_eval_expr_&amp;lt;MyProcPid&amp;gt;_&amp;lt;module_generation&amp;gt;&lt;&#x2F;code&gt;, where &lt;code&gt;MyProcPid&lt;&#x2F;code&gt; is the process id of the current server process and &lt;code&gt;module_generation&lt;&#x2F;code&gt; is the number of emitted functions. We add these two variables to the emitted function to avoid symbol collision since there might be multiple functions being emitted for a single query. By now, We have nothing to emit but some comments like: &quot;&lt;code&gt;&#x2F;&#x2F; OP(&amp;lt;opcode&amp;gt;) to implement&lt;&#x2F;code&gt;&quot;.&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the diff)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; &#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * To avoid symbol name collision, we use this variable to count the number of
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * emitted functions and use it as a part of the emitted function&amp;#39;s name.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+static int module_generation = 0;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; extern void _PG_jit_provider_init(JitProviderCallbacks *cb);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; typedef struct SlowJitContext {
&lt;&#x2F;span&gt;&lt;span&gt;   JitContext base;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Fields to be implemented later. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; } SlowJitContext;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static bool slowjit_compile_expr(ExprState *state) {
&lt;&#x2F;span&gt;&lt;span&gt;   PlanState *parent = state-&amp;gt;parent;
&lt;&#x2F;span&gt;&lt;span&gt;   SlowJitContext *jit_ctx = NULL;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* The name of the emitted function. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  char symbol_name[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* Buffer to hold emitted C codes. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  StringInfoData code_holder;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* parent shouldn&amp;#39;t be NULL. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   Assert(parent != NULL);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span&gt;    * loaded successfully.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_compile_expr&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Initialize the context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   if (parent-&amp;gt;state-&amp;gt;es_jit) {
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;      * We can reuse the JIT context.
&lt;&#x2F;span&gt;&lt;span&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)parent-&amp;gt;state-&amp;gt;es_jit;
&lt;&#x2F;span&gt;&lt;span&gt;   } else {
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerEnlargeJIT(CurrentResourceOwner);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)MemoryContextAllocZero(TopMemoryContext,
&lt;&#x2F;span&gt;&lt;span&gt;                                                        sizeof(SlowJitContext));
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.flags = parent-&amp;gt;state-&amp;gt;es_jit_flags;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* ensure cleanup *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.resowner = CurrentResourceOwner;
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerRememberJIT(CurrentResourceOwner, PointerGetDatum(jit_ctx));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* For re-using the JIT context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     parent-&amp;gt;state-&amp;gt;es_jit = &amp;amp;jit_ctx-&amp;gt;base;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  initStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#define emit_line(...)                                                         \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  do {                                                                         \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    appendStringInfo(&amp;amp;code_holder, __VA_ARGS__);                               \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    appendStringInfoChar(&amp;amp;code_holder, &amp;#39;\n&amp;#39;);                                  \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  } while (0)
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#define emit_include(header) emit_line(&amp;quot;#include \&amp;quot;%s\&amp;quot;&amp;quot;, header)
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  emit_include(&amp;quot;postgres.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  emit_include(&amp;quot;nodes&#x2F;execnodes.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+   * Emit the jitted function signature.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+   * We use MyProcPid and module_generation to avoid symbol name collision.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+   *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  snprintf(symbol_name, MAXPGPATH, &amp;quot;slowjit_eval_expr_%d_%d&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+           module_generation);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  emit_line(&amp;quot;Datum %s(ExprState *state, ExprContext *econtext, bool *isnull)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+            symbol_name);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* Open function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  emit_line(&amp;quot;{&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  for (int opno = 0; opno &amp;lt; state-&amp;gt;steps_len; ++opno) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    ExprEvalStep *op;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    ExprEvalOp opcode;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    op = &amp;amp;state-&amp;gt;steps[opno];
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    opcode = ExecEvalStepOp(state, op);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    switch (opcode) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    default: {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;&#x2F;&#x2F; OP(%d) to implement&amp;quot;, opcode);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* Close function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  emit_line(&amp;quot;}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* Print the emitted function to the psql console. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  elog(NOTICE, &amp;quot;\n%s&amp;quot;, code_holder.data);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Returning &amp;#39;false&amp;#39; indicates we won&amp;#39;t jit the current expression. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   return false;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_release_context(JitContext *ctx) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_release_context&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_reset_after_error(void) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_reset_after_error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; void _PG_jit_provider_init(JitProviderCallbacks *cb) {
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;compile_expr = slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;release_context = slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;reset_after_error = slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Re-compile the module and re-run the query &lt;code&gt;SELECT 1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_compile_expr
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;#include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;#include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Datum slowjit_eval_expr_89791_0(ExprState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, ExprContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;econtext, bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;isnull)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; OP(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;) to implement
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; OP(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;) to implement
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; OP(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) to implement
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_release_context
&lt;&#x2F;span&gt;&lt;span&gt;                QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to jit the simplest query &lt;code&gt;SELECT 1&lt;&#x2F;code&gt;, we need to implement 3 operators: &lt;code&gt;EEOP_CONST (16)&lt;&#x2F;code&gt;, &lt;code&gt;EEOP_ASSIGN_TMP (14)&lt;&#x2F;code&gt;, &lt;code&gt;EEOP_DONE (0)&lt;&#x2F;code&gt;. Remember what we have mentioned in &lt;a href=&quot;&#x2F;archive&#x2F;implementing-jit-provider-for-pgsql&#x2F;#implement-our-own-jit-provider-prototype&quot;&gt;the begining of this chapter&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The emitted function is identical to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;526fe0d79914b2dfcfd79effd1ab26ff62469248&#x2F;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c#L395&quot;&gt;&lt;code&gt;src&#x2F;backend&#x2F;executor&#x2F;execExprInterp.c:ExecInterpExpr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The implementation of these 3 operators looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;EEO_CASE&lt;&#x2F;span&gt;&lt;span&gt;(EEOP_DONE)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span&gt; out;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;EEO_CASE&lt;&#x2F;span&gt;&lt;span&gt;(EEOP_ASSIGN_TMP)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; resultnum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op-&amp;gt;d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;assign_tmp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;resultnum&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(resultnum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resultnum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; resultslot-&amp;gt;tts_tupleDescriptor-&amp;gt;natts)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    resultslot-&amp;gt;tts_values[resultnum] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;resvalue;
&lt;&#x2F;span&gt;&lt;span&gt;    resultslot-&amp;gt;tts_isnull[resultnum] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;resnull;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;EEO_NEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;EEO_CASE&lt;&#x2F;span&gt;&lt;span&gt;(EEOP_CONST)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;op-&amp;gt;resnull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op-&amp;gt;d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;constval&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;isnull&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;op-&amp;gt;resvalue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; op-&amp;gt;d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;constval&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;EEO_NEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;isnull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;resnull;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state-&amp;gt;resvalue;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can copy&amp;amp;paste the logic to &lt;code&gt;slowjit_compile_expr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the diff)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; &#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;  * To avoid symbol name collision, we use this variable to count the number of
&lt;&#x2F;span&gt;&lt;span&gt;  * emitted functions and use it as a part of the emitted function&amp;#39;s name.
&lt;&#x2F;span&gt;&lt;span&gt;  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static int module_generation = 0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; extern void _PG_jit_provider_init(JitProviderCallbacks *cb);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; typedef struct SlowJitContext {
&lt;&#x2F;span&gt;&lt;span&gt;   JitContext base;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Fields to be implemented later. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; } SlowJitContext;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static bool slowjit_compile_expr(ExprState *state) {
&lt;&#x2F;span&gt;&lt;span&gt;   PlanState *parent = state-&amp;gt;parent;
&lt;&#x2F;span&gt;&lt;span&gt;   SlowJitContext *jit_ctx = NULL;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* The name of the emitted function. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   char symbol_name[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Buffer to hold emitted C codes. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   StringInfoData code_holder;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* parent shouldn&amp;#39;t be NULL. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   Assert(parent != NULL);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span&gt;    * loaded successfully.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_compile_expr&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Initialize the context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   if (parent-&amp;gt;state-&amp;gt;es_jit) {
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;      * We can reuse the JIT context.
&lt;&#x2F;span&gt;&lt;span&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)parent-&amp;gt;state-&amp;gt;es_jit;
&lt;&#x2F;span&gt;&lt;span&gt;   } else {
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerEnlargeJIT(CurrentResourceOwner);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)MemoryContextAllocZero(TopMemoryContext,
&lt;&#x2F;span&gt;&lt;span&gt;                                                        sizeof(SlowJitContext));
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.flags = parent-&amp;gt;state-&amp;gt;es_jit_flags;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* ensure cleanup *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.resowner = CurrentResourceOwner;
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerRememberJIT(CurrentResourceOwner, PointerGetDatum(jit_ctx));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* For re-using the JIT context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     parent-&amp;gt;state-&amp;gt;es_jit = &amp;amp;jit_ctx-&amp;gt;base;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   initStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_line(...)                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;   do {                                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfo(&amp;amp;code_holder, __VA_ARGS__);                               \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfoChar(&amp;amp;code_holder, &amp;#39;\n&amp;#39;);                                  \
&lt;&#x2F;span&gt;&lt;span&gt;   } while (0)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_include(header) emit_line(&amp;quot;#include \&amp;quot;%s\&amp;quot;&amp;quot;, header)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;postgres.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;nodes&#x2F;execnodes.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit the jitted function signature.
&lt;&#x2F;span&gt;&lt;span&gt;    * We use MyProcPid and module_generation to avoid symbol name collision.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   snprintf(symbol_name, MAXPGPATH, &amp;quot;slowjit_eval_expr_%d_%d&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;            module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;Datum %s(ExprState *state, ExprContext *econtext, bool *isnull)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;             symbol_name);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Open function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;{&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   for (int opno = 0; opno &amp;lt; state-&amp;gt;steps_len; ++opno) {
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalStep *op;
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalOp opcode;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     op = &amp;amp;state-&amp;gt;steps[opno];
&lt;&#x2F;span&gt;&lt;span&gt;     opcode = ExecEvalStepOp(state, op);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     switch (opcode) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    case EEOP_DONE: {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_DONE&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    *isnull = state-&amp;gt;resnull;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  return state-&amp;gt;resvalue;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      &#x2F;* Close function boday. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      break;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    case EEOP_ASSIGN_TMP: {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      int resultnum = op-&amp;gt;d.assign_tmp.resultnum;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_ASSIGN_TMP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    TupleTableSlot *resultslot = state-&amp;gt;resultslot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    resultslot-&amp;gt;tts_values[%d] = state-&amp;gt;resvalue;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    resultslot-&amp;gt;tts_isnull[%d] = state-&amp;gt;resnull;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      break;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    case EEOP_CONST: {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_CONST&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    bool *resnull = (bool *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resnull);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    Datum *resvalue = (Datum *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resvalue);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    *resnull = (bool) %d;&amp;quot;, op-&amp;gt;d.constval.isnull);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;    *resvalue = (Datum) %luull;&amp;quot;, op-&amp;gt;d.constval.value);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      break;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span&gt;     default: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;&#x2F;&#x2F; OP(%d) to implement&amp;quot;, opcode);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  &#x2F;* Close function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  emit_line(&amp;quot;}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Print the emitted function to the psql console. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;\n%s&amp;quot;, code_holder.data);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Returning &amp;#39;false&amp;#39; indicates we won&amp;#39;t jit the current expression. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   return false;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_release_context(JitContext *ctx) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_release_context&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_reset_after_error(void) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_reset_after_error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; void _PG_jit_provider_init(JitProviderCallbacks *cb) {
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;compile_expr = slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;release_context = slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;reset_after_error = slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Again, re-compile the module and re-run the &lt;code&gt;SELECT 1&lt;&#x2F;code&gt; query.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_compile_expr
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;#include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;#include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Datum slowjit_eval_expr_113916_0(ExprState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;state, ExprContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;econtext, bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;isnull)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; EEOP_CONST
&lt;&#x2F;span&gt;&lt;span&gt;    bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;resnull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;94251888729381&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Datum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;resvalue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (Datum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;94251888729384&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;resnull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (bool) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;resvalue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (Datum) 1ull;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; EEOP_ASSIGN_TMP
&lt;&#x2F;span&gt;&lt;span&gt;    TupleTableSlot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;resultslot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;resultslot;
&lt;&#x2F;span&gt;&lt;span&gt;    resultslot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;tts_values[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;resvalue;
&lt;&#x2F;span&gt;&lt;span&gt;    resultslot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;tts_isnull[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;resnull;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; EEOP_DONE
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;isnull &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;resnull;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  return state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;resvalue;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_release_context
&lt;&#x2F;span&gt;&lt;span&gt;                QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;compile-and-load-the-emitted-function&quot;&gt;Compile and load the emitted function&lt;&#x2F;h3&gt;
&lt;p&gt;To complete our JIT provider, we need to replace the function for executing low level opcodes to our emitted function. The basic idea is compiling the emitted function to a shared library and load the function from the library via &lt;code&gt;dlopen()&lt;&#x2F;code&gt; and &lt;code&gt;dlsym()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the diff)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; &#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;  * To avoid symbol name collision, we use this variable to count the number of
&lt;&#x2F;span&gt;&lt;span&gt;  * emitted functions and use it as a part of the emitted function&amp;#39;s name.
&lt;&#x2F;span&gt;&lt;span&gt;  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static int module_generation = 0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; extern void _PG_jit_provider_init(JitProviderCallbacks *cb);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; typedef struct SlowJitContext {
&lt;&#x2F;span&gt;&lt;span&gt;   JitContext base;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Fields to be implemented later. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; } SlowJitContext;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static bool slowjit_compile_expr(ExprState *state) {
&lt;&#x2F;span&gt;&lt;span&gt;   PlanState *parent = state-&amp;gt;parent;
&lt;&#x2F;span&gt;&lt;span&gt;   SlowJitContext *jit_ctx = NULL;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* The name of the emitted function. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   char symbol_name[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Buffer to hold emitted C codes. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   StringInfoData code_holder;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* parent shouldn&amp;#39;t be NULL. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   Assert(parent != NULL);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span&gt;    * loaded successfully.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_compile_expr&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Initialize the context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   if (parent-&amp;gt;state-&amp;gt;es_jit) {
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;      * We can reuse the JIT context.
&lt;&#x2F;span&gt;&lt;span&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)parent-&amp;gt;state-&amp;gt;es_jit;
&lt;&#x2F;span&gt;&lt;span&gt;   } else {
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerEnlargeJIT(CurrentResourceOwner);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)MemoryContextAllocZero(TopMemoryContext,
&lt;&#x2F;span&gt;&lt;span&gt;                                                        sizeof(SlowJitContext));
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.flags = parent-&amp;gt;state-&amp;gt;es_jit_flags;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* ensure cleanup *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.resowner = CurrentResourceOwner;
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerRememberJIT(CurrentResourceOwner, PointerGetDatum(jit_ctx));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* For re-using the JIT context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     parent-&amp;gt;state-&amp;gt;es_jit = &amp;amp;jit_ctx-&amp;gt;base;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   initStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_line(...)                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;   do {                                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfo(&amp;amp;code_holder, __VA_ARGS__);                               \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfoChar(&amp;amp;code_holder, &amp;#39;\n&amp;#39;);                                  \
&lt;&#x2F;span&gt;&lt;span&gt;   } while (0)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_include(header) emit_line(&amp;quot;#include \&amp;quot;%s\&amp;quot;&amp;quot;, header)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;postgres.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;nodes&#x2F;execnodes.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit the jitted function signature.
&lt;&#x2F;span&gt;&lt;span&gt;    * We use MyProcPid and module_generation to avoid symbol name collision.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   snprintf(symbol_name, MAXPGPATH, &amp;quot;slowjit_eval_expr_%d_%d&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;            module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;Datum %s(ExprState *state, ExprContext *econtext, bool *isnull)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;             symbol_name);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Open function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;{&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   for (int opno = 0; opno &amp;lt; state-&amp;gt;steps_len; ++opno) {
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalStep *op;
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalOp opcode;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     op = &amp;amp;state-&amp;gt;steps[opno];
&lt;&#x2F;span&gt;&lt;span&gt;     opcode = ExecEvalStepOp(state, op);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     switch (opcode) {
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_DONE: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_DONE&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *isnull = state-&amp;gt;resnull;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  return state-&amp;gt;resvalue;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;       &#x2F;* Close function boday. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_ASSIGN_TMP: {
&lt;&#x2F;span&gt;&lt;span&gt;       int resultnum = op-&amp;gt;d.assign_tmp.resultnum;
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_ASSIGN_TMP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    TupleTableSlot *resultslot = state-&amp;gt;resultslot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    resultslot-&amp;gt;tts_values[%d] = state-&amp;gt;resvalue;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    resultslot-&amp;gt;tts_isnull[%d] = state-&amp;gt;resnull;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_CONST: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_CONST&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    bool *resnull = (bool *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resnull);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    Datum *resvalue = (Datum *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resvalue);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *resnull = (bool) %d;&amp;quot;, op-&amp;gt;d.constval.isnull);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *resvalue = (Datum) %luull;&amp;quot;, op-&amp;gt;d.constval.value);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     default: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;&#x2F;&#x2F; OP(%d) to implement&amp;quot;, opcode);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  &#x2F;* Print the emitted function to the psql console. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  elog(NOTICE, &amp;quot;\n%s&amp;quot;, code_holder.data);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    char c_src_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    char shared_library_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    char include_server_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    char compile_command[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    FILE *c_src_file;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    void *handle;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    void *jitted_func;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* Write the emitted C codes to a file. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    snprintf(c_src_path, MAXPGPATH, &amp;quot;&#x2F;tmp&#x2F;%d.%d.c&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+             module_generation);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    c_src_file = fopen(c_src_path, &amp;quot;w+&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    if (c_src_file == NULL) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      ereport(ERROR, (errmsg(&amp;quot;cannot open file &amp;#39;%s&amp;#39; for write&amp;quot;, c_src_path)));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    fwrite(code_holder.data, 1, code_holder.len, c_src_file);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    fclose(c_src_file);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    resetStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    pfree(code_holder.data);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* Prepare the compile command. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    snprintf(shared_library_path, MAXPGPATH, &amp;quot;&#x2F;tmp&#x2F;%d.%d.so&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+             module_generation);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    get_includeserver_path(my_exec_path, include_server_path);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    snprintf(compile_command, MAXPGPATH, &amp;quot;cc -fPIC -I%s -shared -O3 -o %s %s&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+             include_server_path, shared_library_path, c_src_path);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* Compile the codes *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    if (system(compile_command) != 0) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      ereport(ERROR, (errmsg(&amp;quot;cannot execute command: %s&amp;quot;, compile_command)));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* Load the shared library to the current process. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    handle = dlopen(shared_library_path, RTLD_LAZY);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    if (handle == NULL) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      char *err = dlerror();
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      ereport(ERROR,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+              (errmsg(&amp;quot;cannot dlopen &amp;#39;%s&amp;#39;: %s&amp;quot;, shared_library_path, err)));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;* Find the function pointer and save it to state-&amp;gt;evalfunc *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jitted_func = dlsym(handle, symbol_name);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    if (jitted_func == NULL) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      char *err = dlerror();
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+      ereport(ERROR, (errmsg(&amp;quot;cannot find symbol &amp;#39;%s&amp;#39; from &amp;#39;%s&amp;#39;: %s&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+                             symbol_name, shared_library_path, err)));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    state-&amp;gt;evalfunc = jitted_func;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    state-&amp;gt;evalfunc_private = NULL;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    module_generation++;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  &#x2F;* Returning &amp;#39;false&amp;#39; indicates we won&amp;#39;t jit the current expression. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  return false;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  return true;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_release_context(JitContext *ctx) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_release_context&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_reset_after_error(void) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_reset_after_error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; void _PG_jit_provider_init(JitProviderCallbacks *cb) {
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;compile_expr = slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;release_context = slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;reset_after_error = slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Now, we can jit the simplest query!! But there&#x27;re still some problems. After loading the shared library, we lose track of the handle. We need to close the handle of the shared library after the query finishing.&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the diff)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; &#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;  * To avoid symbol name collision, we use this variable to count the number of
&lt;&#x2F;span&gt;&lt;span&gt;  * emitted functions and use it as a part of the emitted function&amp;#39;s name.
&lt;&#x2F;span&gt;&lt;span&gt;  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static int module_generation = 0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; extern void _PG_jit_provider_init(JitProviderCallbacks *cb);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; typedef struct SlowJitContext {
&lt;&#x2F;span&gt;&lt;span&gt;   JitContext base;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  &#x2F;* Fields to be implemented later. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  List *handles;
&lt;&#x2F;span&gt;&lt;span&gt; } SlowJitContext;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static bool slowjit_compile_expr(ExprState *state) {
&lt;&#x2F;span&gt;&lt;span&gt;   PlanState *parent = state-&amp;gt;parent;
&lt;&#x2F;span&gt;&lt;span&gt;   SlowJitContext *jit_ctx = NULL;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* The name of the emitted function. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   char symbol_name[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Buffer to hold emitted C codes. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   StringInfoData code_holder;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* parent shouldn&amp;#39;t be NULL. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   Assert(parent != NULL);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span&gt;    * loaded successfully.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_compile_expr&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Initialize the context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   if (parent-&amp;gt;state-&amp;gt;es_jit) {
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;      * We can reuse the JIT context.
&lt;&#x2F;span&gt;&lt;span&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)parent-&amp;gt;state-&amp;gt;es_jit;
&lt;&#x2F;span&gt;&lt;span&gt;   } else {
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerEnlargeJIT(CurrentResourceOwner);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)MemoryContextAllocZero(TopMemoryContext,
&lt;&#x2F;span&gt;&lt;span&gt;                                                        sizeof(SlowJitContext));
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.flags = parent-&amp;gt;state-&amp;gt;es_jit_flags;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* ensure cleanup *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.resowner = CurrentResourceOwner;
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerRememberJIT(CurrentResourceOwner, PointerGetDatum(jit_ctx));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* For re-using the JIT context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     parent-&amp;gt;state-&amp;gt;es_jit = &amp;amp;jit_ctx-&amp;gt;base;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   initStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_line(...)                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;   do {                                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfo(&amp;amp;code_holder, __VA_ARGS__);                               \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfoChar(&amp;amp;code_holder, &amp;#39;\n&amp;#39;);                                  \
&lt;&#x2F;span&gt;&lt;span&gt;   } while (0)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_include(header) emit_line(&amp;quot;#include \&amp;quot;%s\&amp;quot;&amp;quot;, header)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;postgres.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;nodes&#x2F;execnodes.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit the jitted function signature.
&lt;&#x2F;span&gt;&lt;span&gt;    * We use MyProcPid and module_generation to avoid symbol name collision.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   snprintf(symbol_name, MAXPGPATH, &amp;quot;slowjit_eval_expr_%d_%d&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;            module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;Datum %s(ExprState *state, ExprContext *econtext, bool *isnull)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;             symbol_name);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Open function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;{&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   for (int opno = 0; opno &amp;lt; state-&amp;gt;steps_len; ++opno) {
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalStep *op;
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalOp opcode;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     op = &amp;amp;state-&amp;gt;steps[opno];
&lt;&#x2F;span&gt;&lt;span&gt;     opcode = ExecEvalStepOp(state, op);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     switch (opcode) {
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_DONE: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_DONE&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *isnull = state-&amp;gt;resnull;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  return state-&amp;gt;resvalue;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;       &#x2F;* Close function boday. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_ASSIGN_TMP: {
&lt;&#x2F;span&gt;&lt;span&gt;       int resultnum = op-&amp;gt;d.assign_tmp.resultnum;
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_ASSIGN_TMP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    TupleTableSlot *resultslot = state-&amp;gt;resultslot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    resultslot-&amp;gt;tts_values[%d] = state-&amp;gt;resvalue;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    resultslot-&amp;gt;tts_isnull[%d] = state-&amp;gt;resnull;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_CONST: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_CONST&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    bool *resnull = (bool *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resnull);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    Datum *resvalue = (Datum *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resvalue);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *resnull = (bool) %d;&amp;quot;, op-&amp;gt;d.constval.isnull);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *resvalue = (Datum) %luull;&amp;quot;, op-&amp;gt;d.constval.value);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     default: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;&#x2F;&#x2F; OP(%d) to implement&amp;quot;, opcode);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   {
&lt;&#x2F;span&gt;&lt;span&gt;     char c_src_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     char shared_library_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     char include_server_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     char compile_command[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     FILE *c_src_file;
&lt;&#x2F;span&gt;&lt;span&gt;     void *handle;
&lt;&#x2F;span&gt;&lt;span&gt;     void *jitted_func;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    MemoryContext oldctx;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Write the emitted C codes to a file. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     snprintf(c_src_path, MAXPGPATH, &amp;quot;&#x2F;tmp&#x2F;%d.%d.c&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;              module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;     c_src_file = fopen(c_src_path, &amp;quot;w+&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     if (c_src_file == NULL) {
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR, (errmsg(&amp;quot;cannot open file &amp;#39;%s&amp;#39; for write&amp;quot;, c_src_path)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     fwrite(code_holder.data, 1, code_holder.len, c_src_file);
&lt;&#x2F;span&gt;&lt;span&gt;     fclose(c_src_file);
&lt;&#x2F;span&gt;&lt;span&gt;     resetStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span&gt;     pfree(code_holder.data);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Prepare the compile command. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     snprintf(shared_library_path, MAXPGPATH, &amp;quot;&#x2F;tmp&#x2F;%d.%d.so&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;              module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;     get_includeserver_path(my_exec_path, include_server_path);
&lt;&#x2F;span&gt;&lt;span&gt;     snprintf(compile_command, MAXPGPATH, &amp;quot;cc -fPIC -I%s -shared -O3 -o %s %s&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;              include_server_path, shared_library_path, c_src_path);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Compile the codes *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     if (system(compile_command) != 0) {
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR, (errmsg(&amp;quot;cannot execute command: %s&amp;quot;, compile_command)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Load the shared library to the current process. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     handle = dlopen(shared_library_path, RTLD_LAZY);
&lt;&#x2F;span&gt;&lt;span&gt;     if (handle == NULL) {
&lt;&#x2F;span&gt;&lt;span&gt;       char *err = dlerror();
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR,
&lt;&#x2F;span&gt;&lt;span&gt;               (errmsg(&amp;quot;cannot dlopen &amp;#39;%s&amp;#39;: %s&amp;quot;, shared_library_path, err)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    &#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+     * Keep track of the handle of the shared library, so that we can release it
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+     * later.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    oldctx = MemoryContextSwitchTo(TopMemoryContext);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jit_ctx-&amp;gt;handles = lappend(jit_ctx-&amp;gt;handles, handle);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    MemoryContextSwitchTo(oldctx);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Find the function pointer and save it to state-&amp;gt;evalfunc *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jitted_func = dlsym(handle, symbol_name);
&lt;&#x2F;span&gt;&lt;span&gt;     if (jitted_func == NULL) {
&lt;&#x2F;span&gt;&lt;span&gt;       char *err = dlerror();
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR, (errmsg(&amp;quot;cannot find symbol &amp;#39;%s&amp;#39; from &amp;#39;%s&amp;#39;: %s&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                              symbol_name, shared_library_path, err)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     state-&amp;gt;evalfunc = jitted_func;
&lt;&#x2F;span&gt;&lt;span&gt;     state-&amp;gt;evalfunc_private = NULL;
&lt;&#x2F;span&gt;&lt;span&gt;     module_generation++;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   return true;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_release_context(JitContext *ctx) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-  elog(NOTICE, &amp;quot;slowjit_release_context&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  SlowJitContext *jit_ctx = (SlowJitContext *)ctx;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  ListCell *lc;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  foreach (lc, jit_ctx-&amp;gt;handles) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    void *handle = (void *)lfirst(lc);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    dlclose(handle);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  list_free(jit_ctx-&amp;gt;handles);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  jit_ctx-&amp;gt;handles = NIL;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_reset_after_error(void) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_reset_after_error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; void _PG_jit_provider_init(JitProviderCallbacks *cb) {
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;compile_expr = slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;release_context = slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;reset_after_error = slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;h3 id=&quot;instrumentation-statistics&quot;&gt;Instrumentation statistics&lt;&#x2F;h3&gt;
&lt;p&gt;Something is still missing from our JIT provider. That is instrumentation statistics. The LLVM JIT provider is able to report some statistics about the JIT compilation, e.g., the number of jitted functions, code generation time, etc.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN (ANALYZE) SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;                                                          QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;-------------------------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;) (actual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;966&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;967&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; loops&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; Planning &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;031&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt; JIT:
&lt;&#x2F;span&gt;&lt;span&gt;   Functions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;   Options: Inlining false, Optimization false, Expressions true, Deforming true
&lt;&#x2F;span&gt;&lt;span&gt;   Timing: Generation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;075&lt;&#x2F;span&gt;&lt;span&gt; ms (Deform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms), Inlining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms, Optimization &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;857&lt;&#x2F;span&gt;&lt;span&gt; ms, Emission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;099&lt;&#x2F;span&gt;&lt;span&gt; ms, Total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;031&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt; Execution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;113&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt; rows)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;re various kinds of information about JIT compilation being recorded in the &lt;code&gt;JitContext::instr&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; JitInstrumentation
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* number of emitted functions *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;size_t&lt;&#x2F;span&gt;&lt;span&gt; created_functions;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* accumulated time to generate code *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  instr_time generation_counter;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* accumulated time to deform tuples, included into generation_counter *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  instr_time deform_counter;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* accumulated time for inlining *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  instr_time inlining_counter;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* accumulated time for optimization *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  instr_time optimization_counter;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;* accumulated time for code emission *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  instr_time emission_counter;
&lt;&#x2F;span&gt;&lt;span&gt;} JitInstrumentation;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s implement some of them to complete our prototype. The following diff adds support for counting created functions and the total generation time.&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; pg_slowjit&#x2F;slowjit.c  (Click me to view the diff)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; &#x2F;* A bunch of header files. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;postgres.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;c.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;executor&#x2F;execExpr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;fmgr.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;jit&#x2F;jit.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;lib&#x2F;stringinfo.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;miscadmin.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;execnodes.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;nodes&#x2F;pg_list.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;pg_config_manual.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#include &amp;quot;portability&#x2F;instr_time.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;elog.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;memutils.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;palloc.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;quot;utils&#x2F;resowner_private.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;dlfcn.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdbool.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdint.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; PG_MODULE_MAGIC;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;  * To avoid symbol name collision, we use this variable to count the number of
&lt;&#x2F;span&gt;&lt;span&gt;  * emitted functions and use it as a part of the emitted function&amp;#39;s name.
&lt;&#x2F;span&gt;&lt;span&gt;  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static int module_generation = 0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; extern void _PG_jit_provider_init(JitProviderCallbacks *cb);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; typedef struct SlowJitContext {
&lt;&#x2F;span&gt;&lt;span&gt;   JitContext base;
&lt;&#x2F;span&gt;&lt;span&gt;   List *handles;
&lt;&#x2F;span&gt;&lt;span&gt; } SlowJitContext;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function prototypes for JIT compilation. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; static bool slowjit_compile_expr(ExprState *state) {
&lt;&#x2F;span&gt;&lt;span&gt;   PlanState *parent = state-&amp;gt;parent;
&lt;&#x2F;span&gt;&lt;span&gt;   SlowJitContext *jit_ctx = NULL;
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* The name of the emitted function. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   char symbol_name[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Buffer to hold emitted C codes. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   StringInfoData code_holder;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &#x2F;* Some instrumentation statistics. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  instr_time starttime;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  instr_time endtime;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* parent shouldn&amp;#39;t be NULL. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   Assert(parent != NULL);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit a notice message so that we can check if the JIT provider being
&lt;&#x2F;span&gt;&lt;span&gt;    * loaded successfully.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_compile_expr&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Initialize the context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   if (parent-&amp;gt;state-&amp;gt;es_jit) {
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;      * We can reuse the JIT context.
&lt;&#x2F;span&gt;&lt;span&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)parent-&amp;gt;state-&amp;gt;es_jit;
&lt;&#x2F;span&gt;&lt;span&gt;   } else {
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerEnlargeJIT(CurrentResourceOwner);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx = (SlowJitContext *)MemoryContextAllocZero(TopMemoryContext,
&lt;&#x2F;span&gt;&lt;span&gt;                                                        sizeof(SlowJitContext));
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.flags = parent-&amp;gt;state-&amp;gt;es_jit_flags;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* ensure cleanup *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;base.resowner = CurrentResourceOwner;
&lt;&#x2F;span&gt;&lt;span&gt;     ResourceOwnerRememberJIT(CurrentResourceOwner, PointerGetDatum(jit_ctx));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* For re-using the JIT context. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     parent-&amp;gt;state-&amp;gt;es_jit = &amp;amp;jit_ctx-&amp;gt;base;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  INSTR_TIME_SET_CURRENT(starttime);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;   initStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_line(...)                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;   do {                                                                         \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfo(&amp;amp;code_holder, __VA_ARGS__);                               \
&lt;&#x2F;span&gt;&lt;span&gt;     appendStringInfoChar(&amp;amp;code_holder, &amp;#39;\n&amp;#39;);                                  \
&lt;&#x2F;span&gt;&lt;span&gt;   } while (0)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define emit_include(header) emit_line(&amp;quot;#include \&amp;quot;%s\&amp;quot;&amp;quot;, header)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;postgres.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_include(&amp;quot;nodes&#x2F;execnodes.h&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;    * Emit the jitted function signature.
&lt;&#x2F;span&gt;&lt;span&gt;    * We use MyProcPid and module_generation to avoid symbol name collision.
&lt;&#x2F;span&gt;&lt;span&gt;    *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   snprintf(symbol_name, MAXPGPATH, &amp;quot;slowjit_eval_expr_%d_%d&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;            module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;Datum %s(ExprState *state, ExprContext *econtext, bool *isnull)&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;             symbol_name);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;* Open function body. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   emit_line(&amp;quot;{&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   for (int opno = 0; opno &amp;lt; state-&amp;gt;steps_len; ++opno) {
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalStep *op;
&lt;&#x2F;span&gt;&lt;span&gt;     ExprEvalOp opcode;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     op = &amp;amp;state-&amp;gt;steps[opno];
&lt;&#x2F;span&gt;&lt;span&gt;     opcode = ExecEvalStepOp(state, op);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     switch (opcode) {
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_DONE: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_DONE&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *isnull = state-&amp;gt;resnull;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  return state-&amp;gt;resvalue;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;       &#x2F;* Close function boday. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;}&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_ASSIGN_TMP: {
&lt;&#x2F;span&gt;&lt;span&gt;       int resultnum = op-&amp;gt;d.assign_tmp.resultnum;
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_ASSIGN_TMP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    TupleTableSlot *resultslot = state-&amp;gt;resultslot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    resultslot-&amp;gt;tts_values[%d] = state-&amp;gt;resvalue;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    resultslot-&amp;gt;tts_isnull[%d] = state-&amp;gt;resnull;&amp;quot;, resultnum);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     case EEOP_CONST: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  { &#x2F;&#x2F; EEOP_CONST&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    bool *resnull = (bool *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resnull);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    Datum *resvalue = (Datum *) %lu;&amp;quot;, (uint64_t)op-&amp;gt;resvalue);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *resnull = (bool) %d;&amp;quot;, op-&amp;gt;d.constval.isnull);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;    *resvalue = (Datum) %luull;&amp;quot;, op-&amp;gt;d.constval.value);
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;  }&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;       break;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     default: {
&lt;&#x2F;span&gt;&lt;span&gt;       emit_line(&amp;quot;&#x2F;&#x2F; OP(%d) to implement&amp;quot;, opcode);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   {
&lt;&#x2F;span&gt;&lt;span&gt;     char c_src_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     char shared_library_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     char include_server_path[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     char compile_command[MAXPGPATH];
&lt;&#x2F;span&gt;&lt;span&gt;     FILE *c_src_file;
&lt;&#x2F;span&gt;&lt;span&gt;     void *handle;
&lt;&#x2F;span&gt;&lt;span&gt;     void *jitted_func;
&lt;&#x2F;span&gt;&lt;span&gt;     MemoryContext oldctx;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Write the emitted C codes to a file. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     snprintf(c_src_path, MAXPGPATH, &amp;quot;&#x2F;tmp&#x2F;%d.%d.c&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;              module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;     c_src_file = fopen(c_src_path, &amp;quot;w+&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     if (c_src_file == NULL) {
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR, (errmsg(&amp;quot;cannot open file &amp;#39;%s&amp;#39; for write&amp;quot;, c_src_path)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     fwrite(code_holder.data, 1, code_holder.len, c_src_file);
&lt;&#x2F;span&gt;&lt;span&gt;     fclose(c_src_file);
&lt;&#x2F;span&gt;&lt;span&gt;     resetStringInfo(&amp;amp;code_holder);
&lt;&#x2F;span&gt;&lt;span&gt;     pfree(code_holder.data);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Prepare the compile command. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     snprintf(shared_library_path, MAXPGPATH, &amp;quot;&#x2F;tmp&#x2F;%d.%d.so&amp;quot;, MyProcPid,
&lt;&#x2F;span&gt;&lt;span&gt;              module_generation);
&lt;&#x2F;span&gt;&lt;span&gt;     get_includeserver_path(my_exec_path, include_server_path);
&lt;&#x2F;span&gt;&lt;span&gt;     snprintf(compile_command, MAXPGPATH, &amp;quot;cc -fPIC -I%s -shared -O3 -o %s %s&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;              include_server_path, shared_library_path, c_src_path);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Compile the codes *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     if (system(compile_command) != 0) {
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR, (errmsg(&amp;quot;cannot execute command: %s&amp;quot;, compile_command)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Load the shared library to the current process. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     handle = dlopen(shared_library_path, RTLD_LAZY);
&lt;&#x2F;span&gt;&lt;span&gt;     if (handle == NULL) {
&lt;&#x2F;span&gt;&lt;span&gt;       char *err = dlerror();
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR,
&lt;&#x2F;span&gt;&lt;span&gt;               (errmsg(&amp;quot;cannot dlopen &amp;#39;%s&amp;#39;: %s&amp;quot;, shared_library_path, err)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;      * Keep track of the handle of the shared library, so that we can release it
&lt;&#x2F;span&gt;&lt;span&gt;      * later.
&lt;&#x2F;span&gt;&lt;span&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     oldctx = MemoryContextSwitchTo(TopMemoryContext);
&lt;&#x2F;span&gt;&lt;span&gt;     jit_ctx-&amp;gt;handles = lappend(jit_ctx-&amp;gt;handles, handle);
&lt;&#x2F;span&gt;&lt;span&gt;     MemoryContextSwitchTo(oldctx);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;* Find the function pointer and save it to state-&amp;gt;evalfunc *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;     jitted_func = dlsym(handle, symbol_name);
&lt;&#x2F;span&gt;&lt;span&gt;     if (jitted_func == NULL) {
&lt;&#x2F;span&gt;&lt;span&gt;       char *err = dlerror();
&lt;&#x2F;span&gt;&lt;span&gt;       ereport(ERROR, (errmsg(&amp;quot;cannot find symbol &amp;#39;%s&amp;#39; from &amp;#39;%s&amp;#39;: %s&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                              symbol_name, shared_library_path, err)));
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;     state-&amp;gt;evalfunc = jitted_func;
&lt;&#x2F;span&gt;&lt;span&gt;     state-&amp;gt;evalfunc_private = NULL;
&lt;&#x2F;span&gt;&lt;span&gt;     module_generation++;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+    jit_ctx-&amp;gt;base.instr.created_functions++;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  INSTR_TIME_SET_CURRENT(endtime);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  INSTR_TIME_ACCUM_DIFF(jit_ctx-&amp;gt;base.instr.generation_counter, endtime,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+                        starttime);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;   return true;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_release_context(JitContext *ctx) {
&lt;&#x2F;span&gt;&lt;span&gt;   SlowJitContext *jit_ctx = (SlowJitContext *)ctx;
&lt;&#x2F;span&gt;&lt;span&gt;   ListCell *lc;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   foreach (lc, jit_ctx-&amp;gt;handles) {
&lt;&#x2F;span&gt;&lt;span&gt;     void *handle = (void *)lfirst(lc);
&lt;&#x2F;span&gt;&lt;span&gt;     dlclose(handle);
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;   list_free(jit_ctx-&amp;gt;handles);
&lt;&#x2F;span&gt;&lt;span&gt;   jit_ctx-&amp;gt;handles = NIL;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; static void slowjit_reset_after_error(void) {
&lt;&#x2F;span&gt;&lt;span&gt;   elog(NOTICE, &amp;quot;slowjit_reset_after_error&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;* Function where we initialize JIT compilation callbacks. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; void _PG_jit_provider_init(JitProviderCallbacks *cb) {
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;compile_expr = slowjit_compile_expr;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;release_context = slowjit_release_context;
&lt;&#x2F;span&gt;&lt;span&gt;   cb-&amp;gt;reset_after_error = slowjit_reset_after_error;
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Our prototype is able to report some statistics!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# EXPLAIN (ANALYZE) SELECT 1;
&lt;&#x2F;span&gt;&lt;span&gt;NOTICE:  slowjit_compile_expr
&lt;&#x2F;span&gt;&lt;span&gt;                                                           QUERY PLAN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;--------------------------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; Result  (cost&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;) (actual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;002&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;002&lt;&#x2F;span&gt;&lt;span&gt; rows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; loops&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; Planning &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;125&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt; JIT:
&lt;&#x2F;span&gt;&lt;span&gt;   Functions: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;   Options: Inlining false, Optimization false, Expressions true, Deforming true
&lt;&#x2F;span&gt;&lt;span&gt;   Timing: Generation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;71&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;044&lt;&#x2F;span&gt;&lt;span&gt; ms (Deform &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms), Inlining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms, Optimization &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms, Emission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;000&lt;&#x2F;span&gt;&lt;span&gt; ms, Total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;71&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;044&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt; Execution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;71&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;358&lt;&#x2F;span&gt;&lt;span&gt; ms
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt; rows)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this blog post, we implemented a simple and low efficient JIT provider prototype. There&#x27;re several aspects that can be improved.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Each shared library only contains one function. Sometimes we need to compile several shared libraries to jit a single query. The LLVM JIT provider of PostgreSQL can emit several functions in one go. It can save some time in compiling the shared library and loading the function.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In order to make this article easy to understand, some of the codes are incorrect. E.g., The &lt;code&gt;default&lt;&#x2F;code&gt; branch of the switch-clause for code generation should return false to stop jitting unsupported queries, otherwise incorrect result will be produced and server may crash.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Test cases for the JIT provider are missing. I usually test it by running the PostgreSQL regression test suite with the JIT provider being loaded.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The full codes for this post can be found in the &lt;code&gt;blog&lt;&#x2F;code&gt; branch of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;higuoxing&#x2F;pg_slowjit&#x2F;tree&#x2F;blog&quot;&gt;higuoxing&#x2F;pg_slowjit&lt;&#x2F;a&gt; and an improved version is in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;higuoxing&#x2F;pg_slowjit&#x2F;tree&#x2F;main&quot;&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; branch.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;16&#x2F;jit-extensibility.html&quot;&gt;Pluggable JIT Providers.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;higuoxing&#x2F;pg_slowjit&quot;&gt;pg_slowjit - A simple demo to illustrate how to implement a JIT provider for PostgreSQL.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;higuoxing&#x2F;pg_asmjit&quot;&gt;pg_asmjit - An alternative x86_64 JIT provider (based on asmjit) for PostgreSQL.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asmjit.com&#x2F;&quot;&gt;AsmJit -- A low-latency machine code generation library written in C++.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;extend-pgxs.html&quot;&gt;Extension Building Infrastructure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=eurwtUhY5fk&quot;&gt;Query Compilation &amp;amp; JIT Code Generation (CMU Advanced Databases &#x2F; Spring 2023) &lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>First Attempt on Writing a Clang Plugin</title>
        <published>2023-04-13T00:00:00+00:00</published>
        <updated>2023-04-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="/archive/first-attempt-on-clang-plugin/"/>
        <id>/archive/first-attempt-on-clang-plugin/</id>
        
        <content type="html" xml:base="/archive/first-attempt-on-clang-plugin/">&lt;p&gt;&lt;em&gt;Updated on 2024&#x2F;03&#x2F;28: Recently, I learned a new tool called &lt;a href=&quot;https:&#x2F;&#x2F;codeql.github.com&#x2F;&quot;&gt;CodeQL&lt;&#x2F;a&gt;. The AST matcher introduced in this post can be re-written into the following query.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;details&gt;
  &lt;summary&gt; suspicious-control-flow-stmt-in-PG_TRY.ql  (Click me to view the content)&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;ql&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-ql &quot;&gt;&lt;code class=&quot;language-ql&quot; data-lang=&quot;ql&quot;&gt;&lt;span&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt; * @name Find suspicious control flow stmt in PG_TRY()
&lt;&#x2F;span&gt;&lt;span&gt; * @kind problem
&lt;&#x2F;span&gt;&lt;span&gt; * @problem.severity warning
&lt;&#x2F;span&gt;&lt;span&gt; * @id postgresql&#x2F;suspicious-control-flow-stmt-in-pg-try
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import cpp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;predicate pgTryCatchBlocks(Stmt tryBlock, Stmt catchBlock) {
&lt;&#x2F;span&gt;&lt;span&gt;  exists(IfStmt ifStmt, FunctionCall sigsetjmpCall, BinaryOperation op, Literal zero |
&lt;&#x2F;span&gt;&lt;span&gt;    sigsetjmpCall.getTarget().hasName(&amp;quot;__sigsetjmp&amp;quot;) and
&lt;&#x2F;span&gt;&lt;span&gt;    ifStmt.getCondition().(BinaryOperation) = op and
&lt;&#x2F;span&gt;&lt;span&gt;    op.getOperator() = &amp;quot;==&amp;quot; and
&lt;&#x2F;span&gt;&lt;span&gt;    op.hasOperands(sigsetjmpCall, zero) and
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;* Reduce false positives. *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    ifStmt.isAffectedByMacro() and
&lt;&#x2F;span&gt;&lt;span&gt;    tryBlock = ifStmt.getThen() and
&lt;&#x2F;span&gt;&lt;span&gt;    catchBlock = ifStmt.getElse()
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;predicate suspiciousReturn(Stmt stmt) { stmt instanceof ReturnStmt }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;predicate suspiciousBreak(Stmt stmt, Stmt tryBlock) {
&lt;&#x2F;span&gt;&lt;span&gt;  stmt instanceof BreakStmt and
&lt;&#x2F;span&gt;&lt;span&gt;  not exists(Loop loop |
&lt;&#x2F;span&gt;&lt;span&gt;    loop = tryBlock.getAChild+() and
&lt;&#x2F;span&gt;&lt;span&gt;    loop.getAChild+() = stmt
&lt;&#x2F;span&gt;&lt;span&gt;  ) and
&lt;&#x2F;span&gt;&lt;span&gt;  not exists(SwitchStmt switch |
&lt;&#x2F;span&gt;&lt;span&gt;    switch = tryBlock.getAChild+() and
&lt;&#x2F;span&gt;&lt;span&gt;    switch.getAChild+() = stmt
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;predicate suspiciousContinue(Stmt stmt, Stmt tryBlock) {
&lt;&#x2F;span&gt;&lt;span&gt;  stmt instanceof ContinueStmt and
&lt;&#x2F;span&gt;&lt;span&gt;  not exists(Loop loop |
&lt;&#x2F;span&gt;&lt;span&gt;    loop = tryBlock.getAChild+() and
&lt;&#x2F;span&gt;&lt;span&gt;    loop.getAChild+() = stmt
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;predicate suspiciousGoto(Stmt stmt, Stmt tryBlock) {
&lt;&#x2F;span&gt;&lt;span&gt;  stmt instanceof GotoStmt and
&lt;&#x2F;span&gt;&lt;span&gt;  not exists(LabelStmt label |
&lt;&#x2F;span&gt;&lt;span&gt;    label.getName() = stmt.(GotoStmt).getName() and
&lt;&#x2F;span&gt;&lt;span&gt;    label = tryBlock.getAChild+()
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;from Stmt tryBlock, Stmt suspiciousControlFlowStmt
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;  pgTryCatchBlocks(tryBlock, _) and
&lt;&#x2F;span&gt;&lt;span&gt;  suspiciousControlFlowStmt = tryBlock.getAChild*() and
&lt;&#x2F;span&gt;&lt;span&gt;  (
&lt;&#x2F;span&gt;&lt;span&gt;    suspiciousReturn(suspiciousControlFlowStmt) or
&lt;&#x2F;span&gt;&lt;span&gt;    suspiciousBreak(suspiciousControlFlowStmt, tryBlock) or
&lt;&#x2F;span&gt;&lt;span&gt;    suspiciousContinue(suspiciousControlFlowStmt, tryBlock) or
&lt;&#x2F;span&gt;&lt;span&gt;    suspiciousGoto(suspiciousControlFlowStmt, tryBlock)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;select suspiciousControlFlowStmt, &amp;quot;Found suspicious control flow statements in PG_TRY() block&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;&lt;em&gt;Updated on 2024&#x2F;01&#x2F;06: My fix got merged in &lt;a href=&quot;https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=57d0051706b897048063acc14c2c3454200c488f&quot;&gt;57d00517&lt;&#x2F;a&gt; and I received a fancy PostgreSQL challenge coin!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;coin-1.jpg&quot; width=&quot;280&quot; style=&quot;display: inline-block&quot; &#x2F;&gt;  &lt;img src=&quot;coin-2.jpg&quot; width=&quot;280&quot; style=&quot;display: inline-block&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My daily job is developing extensions for a database called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;greenplum-db&#x2F;gpdb&quot;&gt;Greenplum&lt;&#x2F;a&gt;. It&#x27;s a distributed database derived from &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt;. Each time I play with it, I feel vigilant when encountering PostgreSQL error handling codes using &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt; blocks since we&#x27;ve seen many bugs caused by the misuse of it. I decide to write some automative tools to catch these bugs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-do-postgresql-error-handling-codes-look-like&quot;&gt;What do PostgreSQL error handling codes look like?&lt;&#x2F;h2&gt;
&lt;p&gt;Besides &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; and &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt;, there&#x27;re 2 additional macros involved in the PostgreSQL error handling process: &lt;code&gt;ereport()&lt;&#x2F;code&gt; and &lt;code&gt;PG_END_TRY()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PG_TRY()&lt;&#x2F;code&gt;, &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt; and &lt;code&gt;PG_END_TRY()&lt;&#x2F;code&gt; is to construct the error handling control flow.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ereport()&lt;&#x2F;code&gt; is to report errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The code pattern of error handling process in PostgreSQL looks like,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; FallibleMethod() contains potential error reporting calls, e.g.,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; ereport();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;FallibleMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_CATCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Do error handling.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_END_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code pattern of these macros looks very similar to &lt;code&gt;try-catch&lt;&#x2F;code&gt; expression in other languages, but their usage is more complicated. The definitions after being simplified for these macros are as follows,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; I commented out the macro definition keyword, so that we can benefit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F;   from the syntax highlighting :-)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; If you want to find the full definitions for these macros, you can find them
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F;   in the link below
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F;   https:&#x2F;&#x2F;github.com&#x2F;postgres&#x2F;postgres&#x2F;blob&#x2F;f7431bca8b0138bdbce7025871560d39119565a0&#x2F;src&#x2F;include&#x2F;utils&#x2F;elog.h#L384
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; #define PG_TRY()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    sigjmp_buf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;save_exception_stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PG_exception_stack;
&lt;&#x2F;span&gt;&lt;span&gt;    sigjmp_buf local_sigjmp_buf;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sigsetjmp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(local_sigjmp_buf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      PG_exception_stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;local_sigjmp_buf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; #define PG_CATCH()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      PG_exception_stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; save_exception_stack;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; #define PG_END_TRY()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    PG_exception_stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; save_exception_stack;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; #define ereport()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(PG_exception_stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;siglongjmp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;PG_exception_stack, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; In real world, we don&amp;#39;t want this branch being taken.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-do-pg-try-and-pg-catch-work&quot;&gt;How do &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; and &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt; work?&lt;&#x2F;h2&gt;
&lt;p&gt;The global variable &lt;code&gt;sigjmp_buf *PG_exception_stack&lt;&#x2F;code&gt; saves the environment (stack context) of the previous &lt;code&gt;sigsetjmp()&lt;&#x2F;code&gt; call. Before entering the fallible code section (wrapped by &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; and &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt;), we use &lt;code&gt;sigjmp_buf *save_exception_stack&lt;&#x2F;code&gt; to save the previous environment and assign the current environment to &lt;code&gt;PG_exception_stack&lt;&#x2F;code&gt;, so that if any error occurs (call to &lt;code&gt;ereport()&lt;&#x2F;code&gt;), we can use &lt;code&gt;siglongjmp(*PG_exception_stack)&lt;&#x2F;code&gt; to jump to the correct location (catched by the correct &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt; block).&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt; block, we restore the previous environment for &lt;code&gt;PG_exception_stack&lt;&#x2F;code&gt; before taking any error handling action, so that if we want to populate the error to the upper caller (call to &lt;code&gt;PG_RE_THROW()&lt;&#x2F;code&gt; which is another kind of wrapper for &lt;code&gt;siglongjmp()&lt;&#x2F;code&gt;), &lt;code&gt;siglongjmp(*PG_exception_stack)&lt;&#x2F;code&gt; can jump to the correct location again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;One of the common mistakes being made is using jump statements (e.g., &lt;code&gt;return&lt;&#x2F;code&gt;, &lt;code&gt;break&lt;&#x2F;code&gt;, &lt;code&gt;continue&lt;&#x2F;code&gt; and &lt;code&gt;goto&lt;&#x2F;code&gt;) inside the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block, even for experienced PostgreSQL contributors&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. For example, if we use &lt;code&gt;return&lt;&#x2F;code&gt; statement inside the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block, the &lt;code&gt;PG_exception_stack&lt;&#x2F;code&gt; won&#x27;t be restored to the correct stack context before we leaving the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block, this can lead severe issues to the PostgreSQL&#x2F;Greenplum server, e.g., server crash&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The code pattern we try to detect is the use of unsafe &lt;code&gt;return&lt;&#x2F;code&gt;, &lt;code&gt;break&lt;&#x2F;code&gt;, &lt;code&gt;continue&lt;&#x2F;code&gt; and &lt;code&gt;goto&lt;&#x2F;code&gt; statements inside the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block. The unsafe code pattern can be summarized to the following rules,&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;return&lt;&#x2F;code&gt; statements used in anywhere of the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Unsafe, since PG_exception_stack still stores the
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; current environment after leaving the PG_TRY-PG_CATCH
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; blocks.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_CATCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_END_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;break&lt;&#x2F;code&gt; statements used in anywhere of the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block except ones used inside the &lt;code&gt;switch&lt;&#x2F;code&gt;, &lt;code&gt;do-while&lt;&#x2F;code&gt;, &lt;code&gt;while&lt;&#x2F;code&gt; and &lt;code&gt;for&lt;&#x2F;code&gt; statements.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Unsafe, since the break statement is jumping out of the 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; the PG_TRY() block, which breaks the error handling
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; stack context or environment.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe, because we&amp;#39;re jumping out of the do-while loop not the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; PG_TRY() block.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe. Ditto.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(;;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe. Ditto.
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(c)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe. Ditto.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_CATCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_END_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;continue&lt;&#x2F;code&gt; statements used in anywhere of the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block except ones used inside the &lt;code&gt;do-while&lt;&#x2F;code&gt;, &lt;code&gt;while&lt;&#x2F;code&gt; and &lt;code&gt;for&lt;&#x2F;code&gt; loops.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Unsafe, since the continue statement will terminate the do-while loop
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; expanded from the PG_TRY() macro and jump out of the PG_TRY() block
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; with broken error handing stack context.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(;;)
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_CATCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_END_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;goto&lt;&#x2F;code&gt; statements with label out of the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;label1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;  label2:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Unsafe. Because we&amp;#39;re jumping out of the PG_TRY() block and it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; will break the stack context.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span&gt; label1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Safe.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;goto&lt;&#x2F;span&gt;&lt;span&gt; label2;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_CATCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;PG_END_TRY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ast-matcher-or-static-analyzer&quot;&gt;AST matcher or static analyzer?&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; is a macro in C and it&#x27;s always expanded to the same thing. Besides, the statements we want to detect are very simple ones which don&#x27;t involve tracking the change of symbols&#x27; states. Clang&#x27;s AST matcher is good enough for our problem.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, we register a callback function &lt;code&gt;checkEndOfTranslationUnit()&lt;&#x2F;code&gt; to find out &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; blocks with &lt;code&gt;return&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;break&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;continue&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;goto&lt;&#x2F;code&gt; statements inside. The callback function will be called on each of translation unit during compiling. When a &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block gets matched, we will carefully check if it&#x27;s really unsafe to reduce false positive warnings. The code snippet with comments is listed below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;ReturnInPgTryBlockChecker &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;Checker&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;check::EndOfTranslationUnit&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;checkEndOfTranslationUnit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; TranslationUnitDecl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;TU&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                 AnalysisManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;AM&lt;&#x2F;span&gt;&lt;span&gt;, BugReporter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    MatchFinder F;
&lt;&#x2F;span&gt;&lt;span&gt;    PgTryBlockMatcherCallback CB;
&lt;&#x2F;span&gt;&lt;span&gt;    StatementMatcher PgTry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; PG_TRY() will be expanded to the following expression.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; if (__sigsetjmp() == 0) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F;   PG_exception_stack = &amp;amp;local_sigjmp_buf;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F;   ...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;ifStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; The &amp;#39;if&amp;#39; statement must contain a binary operator and the binary operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; must be &amp;#39;==&amp;#39;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasCondition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;binaryOperator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;allOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasOperatorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;==&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; One of the &amp;#39;==&amp;#39; operands must be a function call and the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; function must has name &amp;#39;__sigsetjmp&amp;#39;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Another operand must be an integer literal &amp;#39;0&amp;#39;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasOperands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;callExpr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;callee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;functionDecl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;__sigsetjmp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                                                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;integerLiteral&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)))))),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; The &amp;#39;if&amp;#39; statement must have a &amp;#39;then&amp;#39; block and the &amp;#39;then&amp;#39; block must
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; contain contain one of &amp;#39;return&amp;#39;, &amp;#39;break&amp;#39;, &amp;#39;continue&amp;#39; and &amp;#39;goto&amp;#39; statements.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasThen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;eachOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; For convenience, we bind the PG_TRY() block with return statement with
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; name &amp;#39;ReturnInPgTryBlock&amp;#39;, so that we can emit a warning message immediately
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; later.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;forEachDescendant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;returnStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;ReturnInPgTryBlock&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;anyOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasDescendant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;breakStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasDescendant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;continueStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hasDescendant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;gotoStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())))))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; We bind our interested PG_TRY() block&amp;#39;s AST to the name &amp;#39;PgTryBlock&amp;#39; for careful
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; checking later.
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;PgTryBlock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; &amp;amp;CB is the callback that will be invoked later for carefully checking the matched
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; PG_TRY() block&amp;#39;s AST.
&lt;&#x2F;span&gt;&lt;span&gt;    F.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;addMatcher&lt;&#x2F;span&gt;&lt;span&gt;(PgTry, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;CB);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Match the AST!
&lt;&#x2F;span&gt;&lt;span&gt;    F.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;matchAST&lt;&#x2F;span&gt;&lt;span&gt;(TU-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getASTContext&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, we check the matched &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block&#x27;s AST carefully. The following callback will be called once the AST bound to the name of &lt;code&gt;&quot;ReturnInPgTryBlock&quot;&lt;&#x2F;code&gt; or &lt;code&gt;&quot;PgTryBlock&quot;&lt;&#x2F;code&gt; gets matched.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;PgTryBlockMatcherCallback &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;MatchFinder::MatchCallback &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;PgTryBlockMatcherCallback&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; MatchFinder::MatchResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;override &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ASTContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;Ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; ReturnStmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;Return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            Result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Nodes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getNodeAs&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ReturnStmt&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;ReturnInPgTryBlock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; We&amp;#39;ve found a return statement inside PG_TRY block. Let&amp;#39;s warn about
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; it.
&lt;&#x2F;span&gt;&lt;span&gt;      DiagnosticsEngine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;DE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Ctx-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getDiagnostics&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; DiagID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getCustomDiagID&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          DiagnosticsEngine::Error,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;unsafe return statement is used inside PG_TRY block&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; DB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;(Return-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getReturnLoc&lt;&#x2F;span&gt;&lt;span&gt;(), DiagID);
&lt;&#x2F;span&gt;&lt;span&gt;      DB.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;AddSourceRange&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;CharSourceRange::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getCharRange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Return-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getSourceRange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; IfStmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;If &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;                   Result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Nodes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getNodeAs&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;IfStmt&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;PgTryBlock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Check if the &amp;#39;break&amp;#39;&#x2F;&amp;#39;continue&amp;#39;&#x2F;&amp;#39;goto&amp;#39; statements inside the
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; PG_TRY() black are unsafe.
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Stmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;Then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; If-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getThen&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CheckUnsafeBreakStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Then, Ctx)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CheckUnsafeContinueStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Then, Ctx)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;CheckUnsafeGotoStmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Then, Ctx)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code for checking the safety of using &lt;code&gt;break&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;continue&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;goto&lt;&#x2F;code&gt; statements inside the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block are very similar. Here, we take &lt;code&gt;CheckUnsafeBreakStmt()&lt;&#x2F;code&gt; as an example. The basic idea behind it is performing BFS on the matched AST.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;CheckUnsafeBreakStmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Stmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;Then&lt;&#x2F;span&gt;&lt;span&gt;, ASTContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;Ctx&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  std::queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Stmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; StmtQueue;
&lt;&#x2F;span&gt;&lt;span&gt;  StmtQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(Then);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;StmtQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Stmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;CurrStmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; StmtQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    StmtQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;CurrStmt)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; BreakStmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;Break &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;llvm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;dyn_cast_if_present&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;BreakStmt&amp;gt;(CurrStmt)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; We&amp;#39;ve found a break statement inside PG_TRY block. Let&amp;#39;s warn
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; about it.
&lt;&#x2F;span&gt;&lt;span&gt;      DiagnosticsEngine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;DE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Ctx-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getDiagnostics&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; DiagID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getCustomDiagID&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          DiagnosticsEngine::Error,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;break statement is used inside PG_TRY block which is unsafe&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; DB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;(Break-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getBreakLoc&lt;&#x2F;span&gt;&lt;span&gt;(), DiagID);
&lt;&#x2F;span&gt;&lt;span&gt;      DB.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;AddSourceRange&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;CharSourceRange::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getCharRange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(Break-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getSourceRange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; break stataments in while&#x2F;do-while&#x2F;for&#x2F;switch statements are safe. We don&amp;#39;t
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; need to perform BFS on the child nodes.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;llvm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;isa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;WhileStmt&amp;gt;(CurrStmt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;llvm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;isa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;DoStmt&amp;gt;(CurrStmt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;||
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;llvm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;isa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;ForStmt&amp;gt;(CurrStmt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;llvm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;isa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;&amp;lt;SwitchStmt&amp;gt;(CurrStmt)&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Stmt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; CurrStmt-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;children&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;      StmtQueue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(C);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, our checker can report unsafe code patterns in PostgreSQL based projects. The source code for the checker can be found in my GitHub repo&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;does-it-find-any-potential-bugs-in-the-real-world&quot;&gt;Does it find any potential bugs in the real world?&lt;&#x2F;h2&gt;
&lt;p&gt;Yes, it found! I found some unsafe codes with it in PostgreSQL&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; and of course in Greenplum (I didn&#x27;t file the issue to Greenplum since I would like to fix that in PostgreSQL first and cherry-pick the patch back to Greenplum). Some of interesting replies I get from the pgsql-hackers mailing list are as follows,&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tom Lane mentions that using &lt;code&gt;break&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;continue&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;goto&lt;&#x2F;code&gt; inside the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block can also mess things up.&lt;&#x2F;li&gt;
&lt;li&gt;Andres Freund gives a very cool compiler hacking with clang thread-safety-analysis. The patch seems better than my AST matcher idea. If his patch gets committed, we can reject such unsafe code patterns during compiling PostgreSQL.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;From d1c99e9d12ba01adb21c5f17c792be44cfeef20f Mon Sep 17 00:00:00 2001
&lt;&#x2F;span&gt;&lt;span&gt;From: Andres Freund &amp;lt;andres@anarazel.de&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date: Thu, 12 Jan 2023 21:18:55 -0800
&lt;&#x2F;span&gt;&lt;span&gt;Subject: [PATCH v1] wip: use clang anotations to warn if code in
&lt;&#x2F;span&gt;&lt;span&gt; PG_TRY&#x2F;CATCH&#x2F;FINALLY returns
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Only hooked up to meson right now.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#4271ae;color:#ffffff;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt; meson.build              |  1 +
&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F;include&#x2F;utils&#x2F;elog.h | 43 +++++++++++++++++++++++++++++++++++++---
&lt;&#x2F;span&gt;&lt;span&gt; 2 files changed, 41 insertions(+), 3 deletions(-)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;meson.build b&#x2F;meson.build
&lt;&#x2F;span&gt;&lt;span&gt;index 45fb9dd616e..66a40e728f4 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;--- a&#x2F;meson.build
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+++ b&#x2F;meson.build
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#3e999f;&quot;&gt;@@ -1741,6 +1741,7 @@ common_warning_flags = [
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;#39;-Wimplicit-fallthrough=3&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;#39;-Wcast-function-type&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;#39;-Wshadow=compatible-local&amp;#39;,
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+  &amp;#39;-Wthread-safety&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;   # This was included in -Wall&#x2F;-Wformat in older GCC versions
&lt;&#x2F;span&gt;&lt;span&gt;   &amp;#39;-Wformat-security&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt; ]
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;src&#x2F;include&#x2F;utils&#x2F;elog.h b&#x2F;src&#x2F;include&#x2F;utils&#x2F;elog.h
&lt;&#x2F;span&gt;&lt;span&gt;index 4a9562fdaae..b211e08322a 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;--- a&#x2F;src&#x2F;include&#x2F;utils&#x2F;elog.h
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+++ b&#x2F;src&#x2F;include&#x2F;utils&#x2F;elog.h
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#3e999f;&quot;&gt;@@ -381,32 +381,69 @@ extern PGDLLIMPORT ErrorContextCallback *error_context_stack;
&lt;&#x2F;span&gt;&lt;span&gt;  * same within each component macro of the given PG_TRY() statement.
&lt;&#x2F;span&gt;&lt;span&gt;  *----------
&lt;&#x2F;span&gt;&lt;span&gt;  *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * Annotations for detecting returns inside a PG_TRY(), using clang&amp;#39;s thread
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * safety annotations.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ *
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * The &amp;quot;lock&amp;quot; implementations need no_thread_safety_analysis as clang can&amp;#39;t
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * understand how a lock is implemented. We wouldn&amp;#39;t want an implementation
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ * anyway, since there&amp;#39;s no real lock here.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#ifdef __clang__
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+typedef int __attribute__((capability(&amp;quot;no_returns_in_pg_try&amp;quot;))) no_returns_handle_t;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+static inline void no_returns_start(no_returns_handle_t l)
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+	__attribute__((acquire_capability(l)))
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+	__attribute__((no_thread_safety_analysis))
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+{
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+static inline void no_returns_stop(no_returns_handle_t l)
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+	__attribute__((release_capability(l)))
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+	__attribute__((no_thread_safety_analysis))
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+{}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#else
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+typedef int pg_attribute_unused() no_returns_handle_t;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#define no_returns_start(t) (void)0
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#define no_returns_stop(t) (void)0
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+#endif
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; #define PG_TRY(...)  \
&lt;&#x2F;span&gt;&lt;span&gt; 	do { \
&lt;&#x2F;span&gt;&lt;span&gt; 		sigjmp_buf *_save_exception_stack##__VA_ARGS__ = PG_exception_stack; \
&lt;&#x2F;span&gt;&lt;span&gt; 		ErrorContextCallback *_save_context_stack##__VA_ARGS__ = error_context_stack; \
&lt;&#x2F;span&gt;&lt;span&gt; 		sigjmp_buf _local_sigjmp_buf##__VA_ARGS__; \
&lt;&#x2F;span&gt;&lt;span&gt; 		bool _do_rethrow##__VA_ARGS__ = false; \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+		no_returns_handle_t no_returns_handle##__VA_ARGS__ = 0; \
&lt;&#x2F;span&gt;&lt;span&gt; 		if (sigsetjmp(_local_sigjmp_buf##__VA_ARGS__, 0) == 0) \
&lt;&#x2F;span&gt;&lt;span&gt; 		{ \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-			PG_exception_stack = &amp;amp;_local_sigjmp_buf##__VA_ARGS__
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+			PG_exception_stack = &amp;amp;_local_sigjmp_buf##__VA_ARGS__; \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+		    no_returns_start(no_returns_handle##__VA_ARGS__)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define PG_CATCH(...)	\
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+			no_returns_stop(no_returns_handle##__VA_ARGS__); \
&lt;&#x2F;span&gt;&lt;span&gt; 		} \
&lt;&#x2F;span&gt;&lt;span&gt; 		else \
&lt;&#x2F;span&gt;&lt;span&gt; 		{ \
&lt;&#x2F;span&gt;&lt;span&gt; 			PG_exception_stack = _save_exception_stack##__VA_ARGS__; \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-			error_context_stack = _save_context_stack##__VA_ARGS__
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+			error_context_stack = _save_context_stack##__VA_ARGS__; \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+		    no_returns_start(no_returns_handle##__VA_ARGS__)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define PG_FINALLY(...) \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+			no_returns_stop(no_returns_handle##__VA_ARGS__); \
&lt;&#x2F;span&gt;&lt;span&gt; 		} \
&lt;&#x2F;span&gt;&lt;span&gt; 		else \
&lt;&#x2F;span&gt;&lt;span&gt; 			_do_rethrow##__VA_ARGS__ = true; \
&lt;&#x2F;span&gt;&lt;span&gt; 		{ \
&lt;&#x2F;span&gt;&lt;span&gt; 			PG_exception_stack = _save_exception_stack##__VA_ARGS__; \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-			error_context_stack = _save_context_stack##__VA_ARGS__
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+			error_context_stack = _save_context_stack##__VA_ARGS__; \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+		    no_returns_start(no_returns_handle##__VA_ARGS__)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; #define PG_END_TRY(...)  \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+			no_returns_stop(no_returns_handle##__VA_ARGS__); \
&lt;&#x2F;span&gt;&lt;span&gt; 		} \
&lt;&#x2F;span&gt;&lt;span&gt; 		if (_do_rethrow##__VA_ARGS__) \
&lt;&#x2F;span&gt;&lt;span&gt; 				PG_RE_THROW(); \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;-- 
&lt;&#x2F;span&gt;&lt;span&gt;2.38.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-s-the-next-step&quot;&gt;What&#x27;s the next step?&lt;&#x2F;h2&gt;
&lt;p&gt;This is my very first attempt to write a Clang based checker. In addition to using unsafe &lt;code&gt;return&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;break&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;continue&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;goto&lt;&#x2F;code&gt; statements inside the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block, there&#x27;re still some unsafe code patterns, e.g., modifying a local variable of auto storage class in the &lt;code&gt;PG_TRY()&lt;&#x2F;code&gt; block and use it in the &lt;code&gt;PG_CATCH()&lt;&#x2F;code&gt; block. It would be great to have more checkers for these unsafe code patterns in future.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;message-id&#x2F;CACpMh+CMsGMRKFzFMm3bYTzQmMU5nfEEoEDU2apJcc4hid36AQ@mail.gmail.com&quot;&gt;https:&#x2F;&#x2F;www.postgresql.org&#x2F;message-id&#x2F;CACpMh+CMsGMRKFzFMm3bYTzQmMU5nfEEoEDU2apJcc4hid36AQ@mail.gmail.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;greenplum-db&#x2F;gpdb&#x2F;pull&#x2F;14205&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;greenplum-db&#x2F;gpdb&#x2F;pull&#x2F;14205&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;higuoxing&#x2F;clang-plugins&#x2F;blob&#x2F;88eeb2bea0ade224807bb3e35f1d048dd4d3697c&#x2F;lib&#x2F;ReturnInPgTryBlockChecker.cpp&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;higuoxing&#x2F;clang-plugins&#x2F;blob&#x2F;88eeb2bea0ade224807bb3e35f1d048dd4d3697c&#x2F;lib&#x2F;ReturnInPgTryBlockChecker.cpp&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My Journey with LLVM (GSoC&#x27;20 Final Evaluation)</title>
        <published>2020-08-28T00:00:00+00:00</published>
        <updated>2020-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="/archive/my-journey-with-llvm-iii/"/>
        <id>/archive/my-journey-with-llvm-iii/</id>
        
        <summary type="html">&lt;p&gt;My GSoC comes to an end and this is a report of my work during the last 3 months. My project is adding DWARF support to &lt;code&gt;yaml2obj&lt;&#x2F;code&gt;, especially &lt;code&gt;yaml2elf&lt;&#x2F;code&gt;. The original proposal is &lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;13wNr4JbXtzaOly-UsFt7vxI3LKXzik_lVU58ICqslWM&#x2F;edit?usp=sharing&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My Journey with LLVM (GSoC&#x27;20 Phase 2)</title>
        <published>2020-07-30T00:00:00+00:00</published>
        <updated>2020-07-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="/archive/my-journey-with-llvm-ii/"/>
        <id>/archive/my-journey-with-llvm-ii/</id>
        
        <summary type="html">&lt;p&gt;During the second coding period, we’ve implemented the &lt;code&gt;.debug_str_offsets&lt;&#x2F;code&gt;, &lt;code&gt;.debug_rnglists&lt;&#x2F;code&gt; and &lt;code&gt;.debug_loclists&lt;&#x2F;code&gt; section. We’re able to handcraft these 3 sections via the following syntax.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My Journey with LLVM (GSoC&#x27;20 Phase 1)</title>
        <published>2020-06-30T00:00:00+00:00</published>
        <updated>2020-06-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="/archive/my-journey-with-llvm-i/"/>
        <id>/archive/my-journey-with-llvm-i/</id>
        
        <summary type="html">&lt;p&gt;It has been one month since my proposal gets accepted by GSoC&#x27;20. I learned a lot and had a wonderful time. Besides, we’ve made some progress towards our goal. Hence, it’s a good time to review what I’ve done and what I’ve learned in the first coding period.&lt;&#x2F;p&gt;</summary>
        
    </entry>
</feed>
